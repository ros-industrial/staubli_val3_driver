<?xml version="1.0" encoding="utf-8"?>
<Programs xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://www.staubli.com/robotics/VAL3/Program/2">
  <Program name="start">
    <Locals>
      <Local name="l_nScreenUpdate" type="num" xsi:type="array" size="1" />
      <Local name="l_sVersionMajor" type="string" xsi:type="array" size="1" />
      <Local name="l_nVersionMajor" type="num" xsi:type="array" size="1" />
      <Local name="l_bOkMajor" type="bool" xsi:type="array" size="1" />
      <Local name="l_sVersionMinor" type="string" xsi:type="array" size="1" />
      <Local name="l_nVersionMinor" type="num" xsi:type="array" size="1" />
      <Local name="l_bOkMinor" type="bool" xsi:type="array" size="1" />
      <Local name="l_nLibLoad" type="num" xsi:type="array" size="1" />
    </Locals>
    <Code><![CDATA[begin
  // Copyright (c) 2016, Ocado Technology - Robotics Research Team
  //
  // Licensed under the Apache License, Version 2.0 (the "License");
  // you may not use this file except in compliance with the License.
  // You may obtain a copy of the License at
  //
  //     http://www.apache.org/licenses/LICENSE-2.0
  //
  // Unless required by applicable law or agreed to in writing, software
  // distributed under the License is distributed on an "AS IS" BASIS,
  // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  // See the License for the specific language governing permissions and
  // limitations under the License.


  // Load interface library for CS8 or CS9
  //
  // CS9 handles the UI differently than CS8, requires
  // the UI funtions to be loaded in seperate libraries
  
  if(mid(getVersion("System"),1,1) == "7")
    // CS8 - VAL 3 rev 7
    // Check for VAL 3 version >= 7.7
    l_sVersionMajor = mid(getVersion("VAL3"),1,1)
    l_sVersionMinor = mid(getVersion("VAL3"),2,1)
    toNum(l_sVersionMajor, l_nVersionMajor, l_bOkMajor)
    toNum(l_sVersionMinor, l_nVersionMinor, l_bOkMinor)
    if(!l_bOkMajor or !l_bOkMinor)
      popUpMsg("Error reading VAL 3 version")
      call stop()
    endIf
    if( !((l_nVersionMajor == 7) and (l_nVersionMinor >= 7)))
      // VAL 3 version is too old
      popUpMsg("Error: VAL 3 version is < 7.7, socket communication will not work!")
      call stop()
    endIf
    nLibLoadError = libInterface:libLoad("ros_libs/UserInterface/interfaceCS8")
  elseIf(mid(getVersion("System"),1,1) == "8")
    // CS9 - VAL 3 rev 8
    nLibLoadError = libInterface:libLoad("ros_libs/UserInterface/interfaceCS9")
  endIf
  
  // check for libLoad error
  if nLibLoadError != 0
    popUpMsg("Error loading UserPage!")
    call stop()
  else
    // feedback task will run every 20ms (50Hz)
    nFbkPeriod=0.02
    //l_nFbkPeriod = 0.032 // 30Hz
    //l_nFbkPeriod = 0.05  // 20Hz
    //l_nFbkPeriod = 1.0   //  1Hz
  
    // motion control task will run every 4ms (250Hz)
    nMotionPeriod = 0.004
    //l_nMotionPeriod=0.012  // 83Hz
    //l_nMotionPeriod = 0.05 // 20Hz
  
    // data (trajectory) reception task will run every 4ms (250Hz)
    nTrajPeriod = 0.004
    // not in use at the moment
    nScreenUpdate = 1.0

    sStreamTaskName = "streamerTask"
    sTrajPtTaskName = "trajPtTask"
    sMotionTaskName = "motionTask"
    sScreenTaskName = "screenTask"
    sHtbtTaskName = "htbtTask"

    // initialise TCP/IP parameters
    call initParams()
    // setup prefix and header of ROS messages
    call setupRosMsgs()
  
    // socket connection status flags: initially disconnected
    nInConnFlag = 0
    nOutConnFlag = 0
  
    // flag defining whether velocity to be overwritten to max. vel.
    bOverwriteVel = false
  
    nPtsPopped = 0
    nMovePts = 0

    // flush buffer of incoming socket
    clearBuffer(siTcpIpMotion)
    // flush buffer of outgoing socket
    clearBuffer(siTcpIpFbk)
  
    // check if robot is not in emergency stop and wait until estop is reset
    if(esStatus() == 2)
      popUpMsg("Please reset E-Stop")
      wait(esStatus() < 2)
    endIf
  
    // before anything else, enable power (only works if robot is in remote mode)
    if(!isPowered())
      if(workingMode() >= 4)
        do
          enablePower()
          delay(2)
        until isPowered()
      else
        popUpMsg("Power must be enabled manually")
      endIf
    endIf
  
    // reset motion, potentially setting a start joint position for calling autoConnect() in the future
    resetMotion()
  
    //start task for the taskManager:
    taskCreate "taskManager", 50, taskManager()
    wait(taskStatus("taskManager") != -1)
  endIf
  
  
end]]></Code>
  </Program>
</Programs>