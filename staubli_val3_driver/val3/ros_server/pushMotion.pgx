<?xml version="1.0" encoding="utf-8"?>
<Programs xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://www.staubli.com/robotics/VAL3/Program/2">
  <Program name="pushMotion" access="public">
    <Parameters xmlns="http://www.staubli.com/robotics/VAL3/Param/1">
      <Parameter name="x_nMsgRecvState" type="num" xsi:type="element" use="reference" />
    </Parameters>
    <Locals>
      <Local name="l_bOk" type="bool" xsi:type="array" size="1" />
      <Local name="l_nCounter" type="num" xsi:type="array" size="1" />
      <Local name="l_nJointError" type="num" xsi:type="array" size="1" />
      <Local name="l_mTrajPt" type="MotionCmd" xsi:type="array" size="1" />
    </Locals>
    <Code><![CDATA[begin
  // Copyright (c) 2016, Ocado Technology - Robotics Research Team
  //
  // Licensed under the Apache License, Version 2.0 (the "License");
  // you may not use this file except in compliance with the License.
  // You may obtain a copy of the License at
  //
  //     http://www.apache.org/licenses/LICENSE-2.0
  //
  // Unless required by applicable law or agreed to in writing, software
  // distributed under the License is distributed on an "AS IS" BASIS,
  // WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  // See the License for the specific language governing permissions and
  // limitations under the License.



  switch rosGenericMsg.header.nMsgType
    case nStdMsgType["JOINT_TRAJ_PT"]
      l_mTrajPt.nSequence=rosTrajPtMsg.jointTrajPt.nSeq

      // ROS joint position values are in rad, but VAL3 uses degrees
      call toJointRxDeg(rosTrajPtMsg.jointTrajPt.nJoints, l_mTrajPt.jJointRx)

      // from industrial_robot_client/src/joint_trajectory_interface.cpp
      // JointTrajectoryInterface::trajectory_to_msgs()
      // JointTrajectoryInterface::calc_speed()
      // velocity is converted to a scalar value representing % of max velocity,
      // such that 0.2 = 20% of maximum joint speed
      l_mTrajPt.mDesc.vel= limit((rosTrajPtMsg.jointTrajPt.nVelocity * 100), 0, 100)
      l_mTrajPt.nDuration=rosTrajPtMsg.jointTrajPt.nDuration

    break
    case nStdMsgType["JOINT_TRAJ_PT_FULL"]
      l_mTrajPt.nSequence=rosTrajPtFMsg.jointTrajPtFull.nSeq
      l_mTrajPt.nDuration=rosTrajPtFMsg.jointTrajPtFull.nTime

      // ROS joint position values are in rad, but VAL3 uses degrees
      call toJointRxDeg(rosTrajPtFMsg.jointTrajPtFull.nPositions, l_mTrajPt.jJointRx)

      // from industrial_robot_client/src/joint_trajectory_interface.cpp
      // JointTrajectoryInterface::trajectory_to_msgs()
      // JointTrajectoryInterface::calc_speed()
      // velocity is converted to a scalar value representing % of max velocity,
      // such that 0.2 = 20% of maximum joint speed
      l_mTrajPt.mDesc.vel= limit((rosTrajPtFMsg.jointTrajPtFull.nVelocities[0] * 100), 0, 100)
      // not sure about accelerations as yet
      l_mTrajPt.mDesc.accel=rosTrajPtFMsg.jointTrajPtFull.nAccelerations[0]
      l_mTrajPt.mDesc.decel=l_mTrajPt.mDesc.accel
    break
    default
    break
  endSwitch

  // see github.com/ros-industrial/industrial_core/simple_message/include/simple_message/joint_traj_pt.h
  if(l_mTrajPt.nSequence==-4)
    // set flag to stop immediately
    bStopNow=true
  else
    // check whether velocity value should be overwritten with value set on teach pendant
    if(bOverwriteVel == true)
      // overwrite velocity (and acceleration - ?)
      l_mTrajPt.mDesc.vel = getMonitorSpeed()
      // explicitly setting accel and decel to VAL3 default values
      l_mTrajPt.mDesc.accel = mNomSpeed.accel
      l_mTrajPt.mDesc.decel = mNomSpeed.decel
    endIf
    // only push motion into buffer if not a STOP message
    // and if joint positions are within software joint limits
    // and if velocity is greater than zero (beucase movej() will not accept vel <= 0)
    if(isInRange(l_mTrajPt.jJointRx) and l_mTrajPt.mDesc.vel > 0)
      call libQueueFuncs:push(qTrajPtBuffer,l_mTrajPt,l_bOk)
    else
      l_bOk = false
    endIf
    
    if(l_bOk==false)
      // could not push trajectory point into buffer
      // thus ACK should flag FAILURE, but only if comm type is request
      if(rosGenericMsg.header.nCommType==nCommType["SERVICE_REQUEST"])
        switch rosGenericMsg.header.nMsgType
          case nStdMsgType["JOINT_TRAJ_PT"]
            rosTrajPtAck.header.nReplyCode=2
          break
          case nStdMsgType["JOINT_TRAJ_PT_FULL"]
            rosTrajPtFAck.header.nReplyCode=2
          break
          default
          break
        endSwitch
      endIf
    endIf
  endIf
  // check whether ACK should be sent
  if(rosGenericMsg.header.nCommType == nCommType["SERVICE_REQUEST"])
    // comm type request requires ACK
    x_nMsgRecvState = nAck
  else
    // other comm types (e.g., topic) does not require ACK, hence skip state
    x_nMsgRecvState = nReset
  endIf
end]]></Code>
  </Program>
</Programs>
